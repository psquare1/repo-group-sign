function parseRSAPublicKey(keyString) {
    const parts = keyString.trim().split(/\s+/);
    if (parts.length < 2 || parts[0] !== "ssh-rsa") {
        throw new Error("Invalid key format: Keys must begin with 'ssh-rsa'");
    }
    const keyData = atob(parts[1]);
    // Helper to read big-endian 4-byte int
    function readUint32(bytes, offset) {
        return (
            (bytes[offset] << 24) |
            (bytes[offset + 1] << 16) |
            (bytes[offset + 2] << 8) |
            (bytes[offset + 3])
        ) >>> 0;
    }
    // Convert string to byte array
    const bytes = [];
    for (let i = 0; i < keyData.length; i++) {
        bytes.push(keyData.charCodeAt(i));
    }
    let offset = 0;
    // Read "ssh-rsa"
    const typeLen = readUint32(bytes, offset);
    offset += 4;
    const type = String.fromCharCode(...bytes.slice(offset, offset + typeLen));
    offset += typeLen;
    if (type !== "ssh-rsa") {
        throw new Error("Not an ssh-rsa key: Key format not recognized");
    }
    // Read exponent
    const eLen = readUint32(bytes, offset);
    offset += 4 + eLen;
    // Read modulus
    const nLen = readUint32(bytes, offset);
    offset += 4;
    const nBytes = bytes.slice(offset, offset + nLen);
    // Convert modulus bytes to hex string
    let hex = "";
    for (let b of nBytes) {
        hex += b.toString(16).padStart(2, "0");
    }
    // Convert hex to BigInt
    const modulus = BigInt("0x" + hex);
    return modulus;
}

function splitBigIntToChunks(bigint, chunkBits = 120, numChunks = 35) {
    const chunks = [];
    const mask = (1n << BigInt(chunkBits)) - 1n;
    for (var i = 0; i < numChunks; i++) {
        chunks.push(String((bigint & mask << BigInt(i * chunkBits)) >> BigInt(i * chunkBits)));
    }
    return chunks;
}

// helper: SHA-512 via Web Crypto
async function sha512(data) {
  // data: ArrayBuffer or TypedArray
  const hashBuffer = await crypto.subtle.digest('SHA-512', data);
  return new Uint8Array(hashBuffer);
}

// helper: encode a JS string to UTF-8 bytes
function str2bytes(str) {
  return new TextEncoder().encode(str);
}

// helper: pack an SSH string (4-byte BE length + data)
function sshString(bytes) {
  const len = bytes.length;
  const out = new Uint8Array(4 + len);
  // write length big-endian
  out[0] = (len >>> 24) & 0xff;
  out[1] = (len >>> 16) & 0xff;
  out[2] = (len >>> 8 ) & 0xff;
  out[3] = (len       ) & 0xff;
  out.set(bytes, 4);
  return out;
}

// helper: concat many Uint8Arrays
function concat(...arrays) {
  const totalLen = arrays.reduce((sum, a) => sum + a.length, 0);
  const out = new Uint8Array(totalLen);
  let offset = 0;
  for (const arr of arrays) {
    out.set(arr, offset);
    offset += arr.length;
  }
  return out;
}

// helper: hex string → Uint8Array
function hex2bytes(hex) {
  const bytes = new Uint8Array(hex.length / 2);
  for (let i = 0; i < bytes.length; i++) {
    bytes[i] = parseInt(hex.substr(2*i, 2), 16);
  }
  return bytes;
}

// helper: Uint8Array → hex string
function bytes2hex(bytes) {
  return Array.from(bytes).map(b => b.toString(16).padStart(2, '0')).join('');
}

// converts text message to BigInt m
async function messageToBigInt(msgStr) {
  const msgBytes    = str2bytes(msgStr);
  const MAGIC       = str2bytes('SSHSIG');
  const NAMESPACE   = str2bytes('file');
  const HASHALG     = str2bytes('sha512');
  const k           = 512;  // modulus length in bytes
  
  // 1) inner hash: H1 = SHA512(msg)
  const H1 = await sha512(msgBytes);

  // 2) wrapper = MAGIC || sshString(NAMESPACE) || sshString(empty) || sshString(HASHALG) || sshString(H1)
  const wrapper = concat(
    MAGIC,
    sshString(NAMESPACE),
    sshString(new Uint8Array(0)),
    sshString(HASHALG),
    sshString(H1)
  );

  // 3) digestInfo prefix for SHA-512 (ASN.1 DER header)
  const digestinfoPrefix = hex2bytes('3051300d060960864801650304020305000440');

  // 4) outer hash: H2 = SHA512(wrapper)
  const H2 = await sha512(wrapper);

  // 5) digestinfo = prefix || H2
  const digestinfo = concat(digestinfoPrefix, H2);

  // 6) build EM = 0x00‖0x01‖PS‖0x00‖digestinfo
  const psLen = k - 3 - digestinfo.length;
  const PS    = new Uint8Array(psLen).fill(0xff);
  const EM    = concat(
    new Uint8Array([0x00, 0x01]),
    PS,
    new Uint8Array([0x00]),
    digestinfo
  );

  let output = BigInt("0x" + bytes2hex(EM));
  console.log(typeof output);
  return output;
}

function parseSSHSignature(b64) {
    // Decode Base64 to a Uint8Array
    const binStr = atob(b64);
    const buf = new Uint8Array(binStr.length);
    for (let i = 0; i < binStr.length; i++) {
      buf[i] = binStr.charCodeAt(i);
    }
    const dv = new DataView(buf.buffer);
  
    let offset = 0;
    // 1) Check the ASCII magic "SSHSIG"
    const magic = String.fromCharCode(...buf.slice(0, 6));
    if (magic !== "SSHSIG") {
      throw new Error("Invalid SSHSIG magic; expected 'SSHSIG'");
    }
    offset += 6;
  
    // 2) Read version (uint32)
    const version = dv.getUint32(offset, false);
    offset += 4;
    if (version !== 1) {
      throw new Error("Unsupported SSHSIG version " + version);
    }
  
    // 3) Read an SSH string: publickey
    const readString = () => {
      const len = dv.getUint32(offset, false);
      offset += 4;
      const bytes = buf.slice(offset, offset + len);
      offset += len;
      return bytes;
    };
    const publickeyBlob = readString();
  
    // 4) Skip namespace, reserved, and hash_algorithm
    readString(); // namespace
    readString(); // reserved
    readString(); // hash_algorithm
  
    // 5) Read the signature field (itself an SSH string)
    const sigBlob = readString();
  
    // --- Now parse publickeyBlob as an SSH-encoded "ssh-rsa" key:
    //    string    "ssh-rsa"
    //    mpint     e
    //    mpint     n
    const pkDv = new DataView(publickeyBlob.buffer);
    let pkOff = 0;
    // skip the algorithm name
    const nameLen = pkDv.getUint32(pkOff, false);
    pkOff += 4 + nameLen;
    // skip the exponent e mpint
    const eLen = pkDv.getUint32(pkOff, false);
    pkOff += 4 + eLen;
    // read the modulus n mpint
    const nLen = pkDv.getUint32(pkOff, false);
    pkOff += 4;
    const nBytes = publickeyBlob.slice(pkOff, pkOff + nLen);
    
    const publicKey = bytesToBigInt(nBytes);
  
    // --- Now parse the sigBlob as:
    //    string   sig-algo (e.g. "rsa-sha2-512")
    //    string   mpint signature
    const sDv = new DataView(sigBlob.buffer);
    let sOff = 0;
    const algoLen = sDv.getUint32(sOff, false);
    sOff += 4 + algoLen;
    const sigLen = sDv.getUint32(sOff, false);
    sOff += 4;
    const sigBytes = sigBlob.slice(sOff, sOff + sigLen);
    const signature = bytesToBigInt(sigBytes);
  
    return { signature, publicKey };
  
    // Helper: big-endian bytes → BigInt
    function bytesToBigInt(bytes) {
      let hex = [];
      for (let b of bytes) {
        hex.push(b.toString(16).padStart(2, "0"));
      }
      return BigInt("0x" + hex.join(""));
    }
}

var workingKeyNumber = BigInt("765365417809111255173813275650104224477624059776447535885513472137469549548611322888758065033348510659634589161078370833886653009538144102732162987774336840494333278013063217054881402747727681340790093483230045693919272432568332051124206130514953672735356311775646723951515131388787696718471578103894940282504646831686486861000248853535504615812396333729035685073654860260940278839814442937662279649824336306707723231147255732865678612441027906432284597477556787875621474509432640456917295793982923026496785229330268333812550109676472285743611288588510717098991542405085451819002650232069248180536463305628662169272604687125091876626796013027379677714495409081061224738229117259438464442685011601432965137063676372732798874301207025557225556965422968175098796266354147727834505479749010295731418457012387726549380222766064318215547076785360396734986647005224555704228242333571449672876716775079975715538928381741193155415601062965978769684991219076160500083679310125912149190913725773259937029115459431371350936324628499946969760781921589583856303018122386278654292784613962059267403834603838567190594311566967321640891454878781349774536679097237118689231013038393578043788805942154168256625146811173762630672445727472324199980463733");
var workingSignatureNumber = BigInt("513972500123500405797385317895860157493841898351405151073928059416528548370176498959331644500248212280796631703513345258306391989391426999019803214203485660362327062078020758330784617312863938318014314944087042758408884547900325776665340631753563982854721016719113381328381772432029744130998359473801784636610111780004642056996217099703402068625365269386539561088103095411361891761737172491540898754546629092368503818753828661846296323332815849946595797739340037423358470765792679981456555697548552071728038810176408676631962204873525353130734219137768505842094782790890904298598081033893439699426383521984810154993316720422997300883918865556765896948044536801584765106822202631107394033392839460578616931962515019707496546179923254295471384342520971075492036573731306284348425716851042621366306680728305204826529772778472242729652133395362220605480948474451641903666412775552618907901702743338695768597690078188435701760987814499251952278832434546155817862421126897986125631326248418707160157482212542675681175986866888165009421417973019545006695170084577843419800330043589437766302667209971528724304897436991560517765258860533551228997269109226122150495351758559921216856446960522423277152302846861140484992137409000278053299259616");
var workingMessageNumber = BigInt("31872219281407242025505148642475109331663948030010491344733687844358944945421064967310388547820970408352359213697487269225694990179009814674781374751323403257628081559561462351695605167675284372388551941279783515209238245831229026662363729380633136520288327292047232179909791526492877475417113579821717193807584807644097527647305469671333646868883650312280989663788656507661713409911267085806708237966730821529702498972114194166091819277582149433578383639532136271637219758962252614390071122773223025154710411681628917523557526099053858210363406122853294409830276270946292893988830514538950951686480580886602618927728470029090747400687617046511462665469446846624685614084264191213318074804549715573780408305977947238915527798680393538207482620648181504876534152430149355791756374642327623133843473947861771150672096834149014464956451480803326284417202116346454345929350148770746553056995922154382822307758515805142704373984019252210715650875853634697920708113806880196144197384637328982263167395073688501517286678083973976140676496503902620739121794758631023740953944512425741321266089553042243521593428572532834314005559057559722764629865662229640289202512152380151356448373718257579496692938925516737296539235422467714402150447");

// these are different than the working numbers above
var workingKeyArray = [
      "29099851411420030459427540177783565",
      "222731789127905106749662770279681662",
      "119814360479549902300032980572303997",
      "941252741462641561575508397789287737",
      "462162066804013466110747426198460342",
      "211236265517290722645270001097044102",
      "136708786811856364775095317888391367",
      "326253059906127456701679242440134876",
      "485902923734726683675400804588710241",
      "297675743059495976157710552104131717",
      "357480993350443311380607888234552972",
      "1214503153568305176102676591655685014",
      "191836983198344183460510847696320920",
      "799361352367689787804662772902613653",
      "1182965268353410329045321659589367918",
      "775640918280208975671478814099499975",
      "1028476215471323985206544017851003648",
      "395690347279472007475442132930819722",
      "1222379500877550897705325113052883071",
      "1110734675998808302008130116025581924",
      "413887328136511945099367634697144523",
      "1261629927320057403924903680405122072",
      "659072312199563003934206865941385482",
      "463685206328816955845480067952200365",
      "1014776572673763791160823621535711885",
      "154075164056784456133969871794359698",
      "93734672352796818733710320906993914",
      "997763277336594028307252333433877617",
      "388896581491597355373543282314581549",
      "264217053554459349046186702367235028",
      "652265898924865004528062919423969840",
      "966122191060344257439150058474755753",
      "560544526248039173503927763216478293",
      "710375264880619563271679138365451832",
      "56769"
    ];

var workingMessageArray = [
    "1287956919671396814815711692849733796",
    "96576123870083234206161294196626356",
    "47905643502949643163218396523285651",
    "275163357159855292292185263355335580",
    "373873659201825414798700960219320417",
    "1329227995784911154018941010063220870",
    "1329227995784915872903807060280344575",
    "1329227995784915872903807060280344575",
    "1329227995784915872903807060280344575",
    "1329227995784915872903807060280344575",
    "1329227995784915872903807060280344575",
    "1329227995784915872903807060280344575",
    "1329227995784915872903807060280344575",
    "1329227995784915872903807060280344575",
    "1329227995784915872903807060280344575",
    "1329227995784915872903807060280344575",
    "1329227995784915872903807060280344575",
    "1329227995784915872903807060280344575",
    "1329227995784915872903807060280344575",
    "1329227995784915872903807060280344575",
    "1329227995784915872903807060280344575",
    "1329227995784915872903807060280344575",
    "1329227995784915872903807060280344575",
    "1329227995784915872903807060280344575",
    "1329227995784915872903807060280344575",
    "1329227995784915872903807060280344575",
    "1329227995784915872903807060280344575",
    "1329227995784915872903807060280344575",
    "1329227995784915872903807060280344575",
    "1329227995784915872903807060280344575",
    "1329227995784915872903807060280344575",
    "1329227995784915872903807060280344575",
    "1329227995784915872903807060280344575",
    "1329227995784915872903807060280344575",
    "1"
  ];

var workingSignatureArray = [
    "38449721862366296846568711086732783",
    "778695136550350738509377433111451593",
    "264792242610950332830944585059544118",
    "904722252610499921657983883066269378",
    "556447581844566963753602216682193978",
    "114528361406982905106531284901528630",
    "1983176552547524527939687436957630",
    "650126734331050732251689639163378124",
    "551706986069560636069223178983516024",
    "518135723771882945515213453970495281",
    "153903625006791583314230783457252748",
    "276650713575625685652272888126789439",
    "1015197250999457677429686293694393240",
    "730309478207454521453692398907481832",
    "725862742469154653493535774187952601",
    "196795517088308888038640733444981357",
    "167063748068722761260786245913380278",
    "346333492613241397466953165181150003",
    "337035260906534386923890233717846126",
    "485740616320858949574174448344432830",
    "198427499111514850413764454934395045",
    "12967130261931664801018183821126536",
    "1200915128197571113739134416118760098",
    "1012430343092751141552950533504201145",
    "602390255167370100154079252797805548",
    "533711890816397070724519330425185419",
    "328720920702966941442469099345578396",
    "561709086163529390951549216476136829",
    "424892301264517637127815752324480878",
    "1180282205554382870656645045690198167",
    "577959510041221255859501699620169670",
    "9866134565527331979888744778992254",
    "103470987085819700032685667051220941",
    "9423537977555163228559621186100817",
    "52752"
  ];

// a third set of valid inputs, this time in text
var workingMessage = "0xPARC";
var workingKey = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCSYtVssAMu4s3V+3wA24y8UCXqGCDJtNqTDouo68KUTdM2xyqw7J/cCvjle3MnJAKn975nVvb+sGWe1XRLb6wCJqJ4ezb+V9Tc1jrOwNLUGEiRbI1MR80SHvlsY9wNNt9U7EzqD8GLXwpgrjbaHySsaR29Zj6udafTdHnNVsb2FHNSzk5NaudcgUhcUxSTpkFhGFETdxnfrnZ4fqrsCHinZjU2FTPqqCI2//7vBKzg8APw2e5bxX2qLP79YSpUWgldf810rf/ccXyw7RT1iYI+xFsu1jkofXI8di+qoh4sKZ/7sPhDdWz2Ep22y9L6rUhHbx42R2LRV+KKCxqj9Gac8uk/YA3fr1qtsViAXsEd8OqtCg2pU0MA8m9JNDwLqmIzJKOqjFInqH7MPPnHxBDXym4R2Dh0EoaPRU2FZ+ZtzFgYBbL/39b5jj1EWuaGIkShbYTnY1wKpx1ZEx9vpuyAcP3dE37FDOa8OqHv6El26NtE9akbL/AGViYfeNTyPTgHOL8nTF6c/aQxzz9p1wtRPyYKRux9vJ6YzQMERI/y5U1NTo2XAuU1JA7f9/YaIHPdW1fvtEw/95dr7fexCeJW2AUL41cZ01bOIahPTuEttfZuUM0LceOfRmvW0XAAu0c4PP6rdPYHhlsn9MuMTbE5xywPpH/LMTrWivpxs8+zEQ==";
var workingSignature = "U1NIU0lHAAAAAQAAAhcAAAAHc3NoLXJzYQAAAAMBAAEAAAIBAJJi1WywAy7izdX7fADbjLxQJeoYIMm02pMOi6jrwpRN0zbHKrDsn9wK+OV7cyckAqf3vmdW9v6wZZ7VdEtvrAImonh7Nv5X1NzWOs7A0tQYSJFsjUxHzRIe+Wxj3A0231TsTOoPwYtfCmCuNtofJKxpHb1mPq51p9N0ec1WxvYUc1LOTk1q51yBSFxTFJOmQWEYURN3Gd+udnh+quwIeKdmNTYVM+qoIjb//u8ErODwA/DZ7lvFfaos/v1hKlRaCV1/zXSt/9xxfLDtFPWJgj7EWy7WOSh9cjx2L6qiHiwpn/uw+EN1bPYSnbbL0vqtSEdvHjZHYtFX4ooLGqP0Zpzy6T9gDd+vWq2xWIBewR3w6q0KDalTQwDyb0k0PAuqYjMko6qMUieofsw8+cfEENfKbhHYOHQSho9FTYVn5m3MWBgFsv/f1vmOPURa5oYiRKFthOdjXAqnHVkTH2+m7IBw/d0TfsUM5rw6oe/oSXbo20T1qRsv8AZWJh941PI9OAc4vydMXpz9pDHPP2nXC1E/JgpG7H28npjNAwREj/LlTU1OjZcC5TUkDt/39hogc91bV++0TD/3l2vt97EJ4lbYBQvjVxnTVs4hqE9O4S219m5QzQtx459Ga9bRcAC7Rzg8/qt09geGWyf0y4xNsTnHLA+kf8sxOtaK+nGzz7MRAAAABGZpbGUAAAAAAAAABnNoYTUxMgAAAhQAAAAMcnNhLXNoYTItNTEyAAACAGhJDy15QzBMNbEp1KrsuyGYFaI0y3vKrIRfbxv03N+qV2AJwZXsTYc+LGcD53TH0xmE/ixo4zJFYvAqqL6o7+5D97pCszWJcKmPG2QvpO4fu0mJLVwgw2bEO/iVL3JsMMqKCegDzC3byqDv44NT3OltWtQRdaxYpGGsNQJ4j1D95iBJ85ua4oy1MdGgImD+fI+RPxZ+GZWHhfiHUDUxhmrRX7g+JXT2igE5ny6llLe/HEpkaGwS1eiov36ZQNlrwsWIkdi1MoWx9xiXrHeLoSqh8m8I7Qsf6xYZqcZ97eotgrrcvMP00sWs17+JzLR6spEx3czMpP/ZR8CBOSy2pflZd+0gRgt8lNNmE71YptUdfw5RK/+NYULDc90KdAyw3D4RW0eWmwjN1GZphTZUWTyOsd2shJTTeZg+PUc2OCvEP4Okcfg63yzgAMCUk0OBCZVc4JtvfNRFKCkXKFYYK3EP7k8fjfC70iTVxu1d6oWfg670zgAssTWXvc2gstRyFfNdSv+AAYbNCtf3AF/OwIydqBpv2PxJfTse22OJwNuppQ7R9XOIyFprp5eFfRSKXm6fOwPLsE4uIqvxs7EQQ10SNzWae2B6bh1rPZKnVxFP34UKrHdc0HYV/Hy3AcSGTJNTSlhuV/ajAD75s+HmOlsJE0L2wrSvl/dMPPtcpcoI";

var HoldenKey = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDSeqUGIrvHAAFF3uZ1eOm5yGItZQEYkcLCJo4VSpqBvdIep1LWrcIPYASiFNT7bDX1rJ50qKsx6o6y9XJP6e5nIF2j+KJ8Qwf0h2yqqUm6uoB5MwKqpEMmk4fYJ+MmUc7yzTaaDVboM+KtO9wk7JcH5WXuvpTc/GPqCdaJFwYe9DZXsueoTcCPKDiU2MgivJGulBVcNGqagg1Zs+Pv4uU6XA49geMvpLHd5S2zZraG0XlE/aCj9hGoANvvJcyaGKuwmOplmzJ9s0J+8j86/3v5frI4WPTYnX6SInVaCSjhJGg4OvIT8NVBvFdu35KFvQqQFqsXWM3hZ0UGVx6XBSUaFCh4TRqOgVngv6WZ2tdRhq7gn3XHJ+kuIP9Rd4Sl3+pY4vb0sTHbeRciNRlvccobn1ao8eZyReYdfe+L7/T3rxmlqIVXLJGIRno6XWS4cOvdOFHxF7ouf7Ll24GSY0/yZqvXDojSCg1Cpjg35SEGJ06KqO1sy2p88WVjt3Stc2zhlYEQVSNXvBzRHTV4Xi4iT68UT3txHm0snRhNIxkEAnA3bBNEcAOvn/c5RiC44OGl/N3rrLQAaoohL1Pt5nRv2slA8XDAfWtP7QKcgSIsmXGbztKkcmWb3mVy+YSvaLLi7lvi6r1HtADFBbiojmRKYZxGHuz8qJEFiCxQHnop2Q==";
var DuruKey = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDHq6HsKjUDHNza6Ql1/1swbw1Af29u3L9/pSLtxB/glMjX3D+nFf66R/R2AIVRKZ5+dLyKwxWbNUX9JNbXv4pwjUCjI6kh0khTROl1MtvQV0jRXWv2KFMg4bXyb/+vZvVxGQZwgjty8d6VZxtY9S2ip9NK4X7XHmXDMeXbweHrllJM3VkC6ZNdasLXRr/iNf3JoMuRExYC5CY9kQ2RLVbav3ARF/kdhlfQsB8Gd5SfxNkD2GNDdpJ8EApgNABput6nOC84lztXqyKWjFVALD8dplq0R5UG4wQxbiWIKDkbRd2GmWyXVK1t/U39AVhWbLrZkZ/VV/tZmXLWxDJriAFNc168pgV3gnY8iyYm3nfi58xj1XuoZbQLrVjFYo/XQWjBkIvv6eVZAYTp5qDwLFAH4YB7pPXE4jCybZ0fibhOXSpSovQbHGjkEO/SIevYBJsrKnZqfpzmW7N5Dcc/u5YnSbdBGJoZAkwcMMZpka2NcWoBzkUFs/+TFPzhQ4dHfpmHKrDjWJPXgMQmYTxDoPDZ/y7L4HFDtOTaE0vER8EODiJpN+pQnTeapf3ctRlNbrt84fZeX0LMPy6fKvLF2FNnlVhEqxXnbg1jxumN+Haeb6y6Flv6ERyzPi1zyc2HY3sw9NdAxJG85O/LaiJQZiaNNUxI0EFv856FVKC0NlT3dQ==";
var PranjalKey = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCpcGyI8jC+r1EcksaZwVM4vKFzrfMoZ+fDEW6dhQ7OVSwq+T0erXssZ+w2IvTYKIy3aOiebAxPl+NdLLrpXWdq8g/yt0MhF7fbaAj7PLJukpSiWrgvu6/tkd3hTkhN8YC2FbjKSgq6fYKm95nt0BplnVn129ZXEaCKxRcxrQifumf1donbIfyRKScvulDu6ojusNvuPhUPPKTE1A6x5A4uXIU4aEn+vkpZbCbVzsNX7N9YHOmphtxuJAKoqIDZ7NxaeYXQgUoPvZagu/RkYQgL8+B8kqH/B4Hj6pIaXSxiwBUoxovnDp/0Si8FsXfKwj2BWnN2HbzqV78cMrI/HDxIkoFa20zLkA3ATIvEX7UMTd9Q+JritrDWCngxfb+QC91nj/g9MfufcFUDZkyhHyYmikdbqMSxAXgSkmil6QHr5PiehmuwvY53QWjokNIBHn3XkCmYdlqD7LgvHV4Bj69XYRD+rWvYH7uzNFmgdMSEtwYWOT9Pk53U9yCmrRzfAYen/Fp1MBHYH2eRe+ICE6LI+xUI/LqOj1tLJcC+c0lxmDcUs5loDLM6fpOotymHmoZERdPAOcxjy4siNN027EatSLBXlQ7Z2kzJQXaEHYQ6GZ6TE2HLZeH9COnNmX9rKR/E7Ohasx1Co9Lm2ZDhPJV5mtD3FSo7DRghuHmcPmgTjQ==";

var workingKeys = HoldenKey + ", " + DuruKey + ", " + workingKey + ", " + PranjalKey;