document.addEventListener("DOMContentLoaded",(function(){const e=document.getElementById("generateProof"),t=document.getElementById("expandableSections"),n=document.getElementById("contributorsContent"),o=document.getElementById("loadingSpinner"),r=document.getElementById("repoUrl"),s=document.getElementById("message"),i=document.getElementById("signature"),a=document.getElementById("parsedSignatureSection"),l=document.getElementById("parsedPublicKey"),c=document.getElementById("parsedSignature"),u=document.getElementById("messageDisplaySection"),y=document.getElementById("rawMessage"),d=document.getElementById("messageBigInt"),g=document.getElementById("fillDefaults");function m(e){return"0x"+e.toString(16)}function A(e){return e.match(/.{1,64}/g).join("\n")}function p(e){if(!e)return void(a.style.display="none");let t;try{const n=parseSSHSignature(e);console.log("Parsed signature:",n),t={signature:splitBigIntToChunks(n.signature),publicKey:splitBigIntToChunks(n.publicKey)},l.textContent=A(m(n.publicKey)),c.textContent=A(m(n.signature)),a.style.display="block"}catch(e){console.error("Error parsing signature:",e),t=[],l.textContent="Error: "+e.message,c.textContent="",a.style.display="block"}return t}e.addEventListener("click",(async function(){const e=r.value.trim(),a=s.value.trim(),l=i.value.trim();if(!e)return void alert("Please enter a repository URL");const c=await async function(e){if(!e)return void(u.style.display="none");let t;try{y.textContent=e;const t=await messageToBigInt(e);d.textContent=A(m(t)),u.style.display="block"}catch(e){console.error("Error processing message:",e),t=[],y.textContent="Error: "+e.message,d.textContent="",u.style.display="block"}return t}(a),g=await p(l),h=g.signature,f=g.publicKey;o.style.display="block",t.style.display="none";try{const o=await fetch("/fetch-repo-data",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({repoUrl:e})});if(!o.ok){const e=await o.json();throw new Error(e.error||"Failed to fetch repository data")}const r=await o.json(),s=Object.values(r.contributors).flatMap((e=>e.publicKeys.map((t=>{try{const e=parseRSAPublicKey(t.key);return splitBigIntToChunks(e)}catch(t){return console.error(`Error parsing key for ${e.username}:`,t),[]}})))).filter((e=>e.length>0)),i=100;if(s.length>i)throw new Error(`Too many keys: maximum allowed is ${i}`);for(;s.length<i;)s.push(s[s.length-1]);let a;console.log(c,h,f),console.log("All public key chunks:",s);try{const e=await Promise.all(s.map((async e=>[e,await hashArray(e)])));a=new Map(e)}catch(e){throw console.error("Error hashing keys:",e),new Error("Failed to hash public keys")}const l=merkleTree(a),u=hashArray(h.publicKey),[y,d]=y(l,u,a.indexOf(u)),g=d.map((e=>e?"1":"0")),{proof:m,publicSignals:A}=await snarkjs.groth16.fullProve({message:c,treeProofs:y,treeDirections:g,signature:h,correctKey:f},"circuit_js/circuit.wasm","circuit_final.zkey");proofComponent.innerHTML=JSON.stringify(m,null,1);const p=await fetch("verification_key.json").then((function(e){return e.json()}));await snarkjs.groth16.verify(p,A,m),function(e){let t="";for(const[n,o]of Object.entries(e.contributors))t+=`\n                <div class="contributor-item">\n                    <h5>${n}</h5>\n                    <p class="text-muted">Contributions: ${o.contributions}</p>\n                    <div class="public-keys">\n                        ${o.publicKeys.map((e=>`\n                            <div class="mb-2">\n                                <small class="text-muted">${e.title}</small>\n                                <div class="public-key">${e.key}</div>\n                            </div>\n                        `)).join("")}\n                    </div>\n                </div>\n            `;n.innerHTML=t}(r),t.style.display="block",t.scrollIntoView({behavior:"smooth"})}catch(e){console.error("Error:",e),alert("Error: "+e.message)}finally{o.style.display="none"}})),g.addEventListener("click",(function(){r.value="https://github.com/TritonDataCenter/node-sshpk",s.value="Hello, World",i.value="U1NIU0lHAAAAAQAAAhcAAAAHc3NoLXJzYQAAAAMBAAEAAAIBAN3BiNA0ZFp4XZsN3M+E9C\n44a/T6mSkZiMfB+y8n7bBVuhGAa0peaboPt2ZM3tapfZ8xFFwe/nCWtxxvgkowMuLoEI4i\nQODNT/uyJhvUSuYU8vH/eVtDdjp4ZBYtwCmHExIzRcpdJgyE7HRxEg155U4+awJ5Zdc8uw\nD6Hax9+Wey/rMnBYQHCE2Sw3BZDSy+9cR/2oyu/MKNWU1yGwrZC6sxOuezAsqtfu7GF8n5\njc+gIgheNtEK8vsobJ/WPQO3v0TmC6wYT7Y4hG/lWtGKs4cpz0jL1etyl2yVPghYzLskqA\nFk62v2ZLQoIto4oJxM0eh/TDUKVCP0MvsWYy1OVHaKxhPK2nXKGZFltKihIbMAlWIMwDA3\nVQ2P/KHsdevH49Sw1smH3UViHzT5OJhumfOOuG645JNP2FIq41KVJPJLI7hUytKy85VBoz\nmY6eeg6fQ26mxS8GXdwouWRNkseu+vPCKlf9A4Sp6MOVSMGR4hrclPNjszH1yFXZTdH9Ay\nxE/XcCSWEelhPtWEi/RzPJfHYPvFaNDcGlRDeiBpoWkJzx6F/ljHKK7AgZABrG3Qjp1F4v\nCGWQJZYc23l4wBXo98gRe2tUdX1bJI0N739XgGQBU5FxNN1n4flHJC64IyYfJ9KuWGaaXa\nMrAtgV9N4w5+BZq7wxOzVHnTVkozjAsNAAAABGZpbGUAAAAAAAAABnNoYTUxMgAAAhQAAA\nAMcnNhLXNoYTItNTEyAAACAM4QAdCdxWyw2DwWejDJV55RE+2Ddu8dYJwfhYZCJa/NAeZw\nICFxiRY4plomoIp+b0+amKq+wf8yTneXcGfG41Bn00/pttVG9CRmemiXUdTOzm0MnT9Oht\nPO8/9ubC5laTFZgj2R+vtIVIV9P08xVEITT3cl2HbK6ImcZsoHIARXilagzhGOXaSLdAQh\n86lR4UzR4H1flVPswvyreIa73kqG3AAdVXG550mv7AaqJU/2GO3xCkKiAn9UMaEemfTho+\nDRiWuIJjc7JSZtnxV1lZTrVDilXYzchEYsXUBzgHCKoQC+QOkfDmCi+T5/JO64vHBuQrOP\nPWdzVEUojpjREeMzICzg89bkCqx3xRBZfYW2JebEotTME2r6D5PyOUJti8vL12kOUOnfA2\nvDv5nZjKcJiYDsm25Rw39bcN7ow4UWwifhlZJ65W+CliuYNUfu6t634CNFJHUTnlc/HaQI\n2Nc/1BYo4UaUklWMY8oQQd87g6sWkUDhzdcxakFBKL7NyqLWLnSg+Sd4fTW5BsUO2ygdb0\nyoKrnMAGHHNQuJfPY416b1Ere+Fg6vJk9SmXLEBBraSYQ2ayr749PXA9bGnekiNgQ6rj5A\nPiC1V4NDqgesvN7CMv9D+KI3P3xjX8rB8iw2lfiiZ6vIW/q87L1wPVfJB2e3t+KbDrpBTW\nOAqPXv"}))}));